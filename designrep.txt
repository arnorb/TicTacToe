Design Report

Oldwhoop(){
	Andri Ólafsson
	Arnór Bogason
	Eyjólfur Krisjánsson
	Jóhann Friðgeir Jóhannsson
}

Index
1. The Battle Plan
2. Implementaion and Testing


1. The Battle Plan 
Before we wrote a single line of code we wrote a short and simple battleplan. A plan that helped us realise what needed to be done and how we should or could possibly get it done. The original plan is written in Icelandic but here is the English version:

Tic Tac Toe: The Battle Plan

What does a game of tic tac toe need?

Gameboard:
  - 3x3 size.
  - Possible manual resizing on the command line.
  - Possibly a grid of 9 buttons.
  - Check out java.awt.*, java.awt.event.* og java.swing.* that have built-in graphical elements, does that suit our project?
  - We could implement our game in html so we can run selenium tests.

Interaction:
  If we go with CL (command line) implentation
  - Gameboard should print out with markers, for example:

  	 | 1 | 2 | 3 |
	_|___|___|___|_
	 |   |   |   |
	A| X |   | O |
	_|___|___|___|_
	 |   |   |   |
	B| X | O |   |
	_|___|___|___|_
	 |   |   |   |
	C|   | X |   |
	_|___|___|___|_
	 |   |   |   |

  - A player can mark a square by writing his choice on the command line, e.g. "A3", then his symbol will appear there.
  - After each move we print the board.

  If we go with graphical implementation
  - A player marks his square by clicking it with the mouse.

  Common factors
  - We need to mark the square with either x or o, depending on who goes first (x) or not (o). One way we could do this is %2.
  - After a square is marked it cannot be marked again.

Calculations:
  - We need to calculate the winner once he has three marked squares in a row.
  - Draw if all squares are marked without any 3-in-a-row.
  - Not possible to win before the 5th selection.
  - We need to scan the board for a winner after every selection from the 5th.

  Proposal: Gameboard implementaion and "check for winner" calculations:
    We could use a two dimensional array for the squares.
    Then we have:
	  0 1 2
	0 ▓ ▓ ▓
	1 ▓ ▓ ▓
	2 ▓ ▓ ▓

  After the 5th selection we check if a winning move has been made. For instance if a player marks square 0,0. then we need to check if a player has a vertical or a horizontal line from 0,0. And since a diagonal line is also possible, we need to check for that too. Then we do not need to check the entire board, just the lines connected to the last marked square. If we find such a line then we end the game and declare a winner!
  We can assign x to 1 and o to 2 in the array, and empty squares to 0.

  There are possibly other ways to calculate this if we choose to go the graphical way, we need to look into that.

Other:
  - Class that handles messages and such?
  - Class that handles a scoreboard?
  - Cats?


2. Implementaion and Testing
We decided to go the graphical way for aesthetic reasons and it seemed to make more sense concerning the delivery part of the project. More on that later in the chapter.

The game logic and calculations is implemented in Java. We wrote three java classes and three test classes. Here is a short summary for each of them:

Board.java
  - The gameboard. Has a constructor that initializes the board to a 3x3 game. Has a clearBoard(), get(), set(), getDim() and getDSQ() functions.

Game.java
  - The game logic. Creates an instance of the gameboard, a variable for the players and an array for the number of wins. Has the functions oneTurn(), getRound(), newRound(), nextRound(), getPlayer(), mark(), isWinner(), horizontalWin(), verticalWin(), diagonalWin(), addWin(), getWins() and resetWins().

TicTacToe.java
  - Connects the game to a html representation using Spark.


BoardTest.java
  - Test class for Board.java, has 5 unit tests.

GameTest.java
  - Test class for Game.java, has 13 unit tests.

TicTacToeTest.java
  - Test class for Spark functionality.


The delivery
After writing and testing (using Maven and Junit) our java code. Build and integrate it using Travis. And futhermore connect our code to a html presentation using Spark, we use webdesign ( coding in html, css and jquery) to finalize the representaion of the game. 

Our jquery code has a function that keeps a player from selecting a marked square.

We perfomed Selenium tests on the game and discovered no bugs or errors.

We used Saucelabs to test the game on other platforms (firefox, iphone etc.).

